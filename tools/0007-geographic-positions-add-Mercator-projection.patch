From 7540936429a37a24c99ff7bbe921320c2846db14 Mon Sep 17 00:00:00 2001
From: Giovanni Grieco <giovanni@grieco.dev>
Date: Thu, 30 May 2024 14:01:37 +0200
Subject: [PATCH 3/3] geographic-positions: add Mercator projection

---
 ...entric-constant-position-mobility-model.cc |  7 +++
 .../model/geocentric-mobility-model.cc        |  8 +++-
 .../model/geocentric-mobility-model.h         |  3 +-
 src/mobility/model/geographic-positions.cc    | 44 +++++++++++++++++++
 src/mobility/model/geographic-positions.h     | 25 +++++++++++
 5 files changed, 85 insertions(+), 2 deletions(-)

diff --git a/src/mobility/model/geocentric-constant-position-mobility-model.cc b/src/mobility/model/geocentric-constant-position-mobility-model.cc
index 5dfb5d16f..9f8c45eef 100644
--- a/src/mobility/model/geocentric-constant-position-mobility-model.cc
+++ b/src/mobility/model/geocentric-constant-position-mobility-model.cc
@@ -72,6 +72,9 @@ GeocentricConstantPositionMobilityModel::DoGetPosition(PositionType type) const
                                                                      GetEarthSpheroidType());
     case PositionType::GEOGRAPHIC:
         return m_position;
+    case PositionType::PROJECTED:
+        return GeographicPositions::GeographicToProjectedCoordinates(m_position,
+                                                                     GetEarthSpheroidType());
     default:
         NS_ABORT_MSG("Unknown PositionType requested");
     }
@@ -99,6 +102,10 @@ GeocentricConstantPositionMobilityModel::DoSetPosition(const Vector& position, P
     case PositionType::GEOGRAPHIC:
         m_position = position;
         break;
+    case PositionType::PROJECTED:
+        m_position =
+            GeographicPositions::ProjectedToGeographicCoordinates(position, GetEarthSpheroidType());
+        break;
     default:
         NS_ABORT_MSG("Unknown PositionType requested");
         break;
diff --git a/src/mobility/model/geocentric-mobility-model.cc b/src/mobility/model/geocentric-mobility-model.cc
index 709383a21..2150a1db4 100644
--- a/src/mobility/model/geocentric-mobility-model.cc
+++ b/src/mobility/model/geocentric-mobility-model.cc
@@ -42,6 +42,9 @@ operator<<(std::ostream& os, PositionType type)
     case PositionType::GEOGRAPHIC:
         os << "GEOGRAPHIC";
         break;
+    case PositionType::PROJECTED:
+        os << "PROJECTED";
+        break;
     default:
         os << "UNKNOWN";
         break;
@@ -117,7 +120,10 @@ GeocentricMobilityModel::GetEarthSpheroidType() const
 Vector
 GeocentricMobilityModel::DoGetPosition() const
 {
-    return DoGetPosition(PositionType::TOPOCENTRIC);
+    // TODO: we should implement a proper way to understand what projection to use
+    return (GetEarthSpheroidType() == GeographicPositions::EarthSpheroidType::WGS84)
+               ? DoGetPosition(PositionType::PROJECTED)
+               : DoGetPosition(PositionType::TOPOCENTRIC);
 }
 
 void
diff --git a/src/mobility/model/geocentric-mobility-model.h b/src/mobility/model/geocentric-mobility-model.h
index baa28d4a3..b130d078d 100644
--- a/src/mobility/model/geocentric-mobility-model.h
+++ b/src/mobility/model/geocentric-mobility-model.h
@@ -35,7 +35,8 @@ enum class PositionType
 {
     TOPOCENTRIC,
     GEOCENTRIC,
-    GEOGRAPHIC
+    GEOGRAPHIC,
+    PROJECTED
 };
 
 std::ostream& operator<<(std::ostream& os, PositionType type);
diff --git a/src/mobility/model/geographic-positions.cc b/src/mobility/model/geographic-positions.cc
index d1acb1e9e..cc22dc24e 100644
--- a/src/mobility/model/geographic-positions.cc
+++ b/src/mobility/model/geographic-positions.cc
@@ -43,6 +43,16 @@ namespace
  * \brief  Lambda function for computing the curvature
  */
 auto curvature = [](double e, double ph) { return sqrt(1 - e * e * sin(ph) * sin(ph)); };
+
+/**
+ * \brief Calibration of the Mercator projection's x-axis in order to have a unit equal to 1 meter.
+ */
+constexpr double projectionUnitX = 25.059;
+
+/**
+ * \brief Calibration of the Mercator projection's y-axis in order to have a unit equal to 1 meter.
+ */
+constexpr double projectionUnitY = 24.665;
 } // namespace
 
 namespace ns3
@@ -204,6 +214,40 @@ GeographicPositions::TopocentricToGeographicCoordinates(Vector pos,
     return geographicCoordinates;
 }
 
+Vector
+GeographicPositions::GeographicToProjectedCoordinates(Vector pos, EarthSpheroidType sphType)
+{
+    NS_LOG_FUNCTION(pos << sphType);
+    NS_ASSERT_MSG(sphType == EarthSpheroidType::WGS84,
+                  "Only WGS84 is supported for now. Requested: " << sphType);
+
+    constexpr double PHI_MAX = 85.051129; // deg; 2 * atan(exp(M_PI)) - M_PI_2
+    NS_ASSERT_MSG(pos.x <= PHI_MAX && pos.x >= -PHI_MAX,
+                  "Latitude must be between -85.051129 and 85.051129 degrees to ensure proper "
+                  "conversion using Web Marcator projection.");
+
+    double phi = DegreesToRadians(pos.x);
+    double lambda = DegreesToRadians(pos.y);
+
+    double x = M_1_PI * pow(2, projectionUnitX - 1) * (lambda + M_PI);
+    double y = M_1_PI * pow(2, projectionUnitY - 1) * (M_PI - log(tan(M_PI_4 + phi * 0.5)));
+
+    NS_LOG_LOGIC("Translated to (" << x << ", " << y << ", " << pos.z << ")");
+    return Vector(x, y, pos.z);
+}
+
+Vector
+GeographicPositions::ProjectedToGeographicCoordinates(Vector pos, EarthSpheroidType sphType)
+{
+    NS_LOG_FUNCTION(pos << sphType);
+    NS_ASSERT_MSG(sphType == EarthSpheroidType::WGS84,
+                  "Only WGS84 is supported for now. Requested: " << sphType);
+
+    double lambda = M_PI * (pow(2, 1 - projectionUnitX) * pos.x - 1);
+    double phi = 2 * atan(exp(M_PI * (1 - pow(2, 1 - projectionUnitY) * pos.y))) - M_PI_2;
+    return Vector(RadiansToDegrees(phi), RadiansToDegrees(lambda), pos.z);
+}
+
 std::list<Vector>
 GeographicPositions::RandCartesianPointsAroundGeographicPoint(double originLatitude,
                                                               double originLongitude,
diff --git a/src/mobility/model/geographic-positions.h b/src/mobility/model/geographic-positions.h
index d11d4b783..471aa167a 100644
--- a/src/mobility/model/geographic-positions.h
+++ b/src/mobility/model/geographic-positions.h
@@ -166,6 +166,31 @@ class GeographicPositions
                                                      Vector refPoint,
                                                      EarthSpheroidType sphType);
 
+    /**
+     * Conversion from geographic to Web Mercator projection (EPSG:3857).
+     * NOTE: assuming WGS87 spheroid.
+     *
+     * @param pos a vector containing the Geographic coordinates (latitude [in degrees], longitude
+     *            [in degrees], altitude [in meters])
+     * @param sphType earth spheroid model to use for conversion
+     * @return Vector position using Web Mercator projection
+     * @see https://en.wikipedia.org/wiki/Web_Mercator_projection
+     * @see https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames
+     */
+    static Vector GeographicToProjectedCoordinates(Vector pos, EarthSpheroidType sphType);
+
+    /**
+     * Conversion from Web Mercator projection (EPSG:3857) to geographic.
+     * NOTE: assuming WGS87 spheroid.
+     *
+     * @param pos a vector containing the Web Mercator coordinates (x, y, z)
+     * @param sphType earth spheroid model to use for conversion
+     * @return Vector position using geographic coordinates
+     * @see https://en.wikipedia.org/wiki/Web_Mercator_projection
+     * @see https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames
+     */
+    static Vector ProjectedToGeographicCoordinates(Vector pos, EarthSpheroidType sphType);
+
     /**
      * Generates uniformly distributed random points (in ECEF Cartesian
      * coordinates) within a given altitude above earth's surface centered around
-- 
2.42.0

